{"version":3,"sources":["realm/RealmApp.tsx","realm/RealmApolloProvider.tsx","components/LoginScreen.tsx","components/Navbar.tsx","graphql-operations.ts","hooks/useTasks.tsx","components/TaskView.tsx","components/TaskCard.tsx","hooks/useDraftTask.tsx","hooks/useTaskLists.tsx","components/TaskLists.tsx","components/TaskDetail.tsx","components/Board.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["app","RealmWeb","id","RealmAppContext","React","undefined","RealmApp","children","appRef","currentUser","user","setUser","current","registerUser","email","password","a","auth","emailPassword","context","logIn","credentials","logOut","Provider","value","useRealmApp","Error","RealmApolloProvider","createApolloClient","client","setClient","realmAppId","graphql_url","httpLink","HttpLink","uri","authorizationHeaderLink","setContext","_","headers","Authorization","accessToken","ApolloClient","link","concat","cache","InMemoryCache","LoginScreen","mode","setMode","setEmail","setPassword","setError","error","handleAuthenticationError","err","console","parts","message","split","reason","length","trimStart","status","reasonRegex","match","groups","parseAuthenticationError","prevErr","handleLogin","e","handleRegistrationAndLogin","isValidEmailAddress","validator","isEmail","Container","Layout","LoginFormRow","LoginHeading","type","label","placeholder","onChange","target","state","errorMessage","variant","onClick","ToggleContainer","ToggleText","ToggleLink","preventDefault","oldMode","styled","div","span","button","uiColors","green","dark2","h1","Navbar","profile","LoggedInUser","size","gray","base","GetAllTasksDocument","gql","useGetAllTasksQuery","baseOptions","ApolloReactHooks","AddTaskDocument","useAddTaskMutation","UpdateTaskDocument","useUpdateTaskMutation","DeleteTaskDocument","useDeleteTaskMutation","TaskStatus","GetUserDocument","TaskView","task","assignee","name","statusColor","statusColors","get","statusMessage","statusMessages","Row","Assignee","Status","backgroundColor","background","textColor","text","Name","DraftTaskView","draft","draftActions","updateDraft","deleteDraft","saveDraft","DraftInput","disabled","Map","Open","Inprogress","Complete","blue","light3","yellow","TextInput","SubmitButton","props","DeleteButton","image","username","AssigneeContainer","Avatar","src","Username","TaskCard","DraftTaskCard","useDraftTask","taskActions","setDraft","draftAssignee","setDraftAssignee","onCompleted","log","getUserQuery","variables","userId","useDraftAssignee","actions","createDraft","updatedDraft","addTask","_id","BSON","ObjectId","_partition","isStatus","isOpenTask","isInProgressTask","isCompleteTask","getTask","tasks","find","findListForStatus","R","useTaskLists","openTasks","filter","inProgressTasks","completeTasks","displayName","displayOrder","map","t","createLists","lists","setLists","updateListsWithNewTasks","list","addTasksToList","listToUpdate","updatedDisplayOrder","prevLists","Array","from","Set","addTaskToList","displayIndex","removeTaskFromList","moveTask","oldStatus","oldDisplayIndex","newStatus","newDisplayIndex","moveTaskInColumn","newIndex","oldIndex","findIndex","useOrderedListActions","previousTasksRef","previousTasks","updatedTasks","newTasks","Boolean","removedTasks","modifiedTasks","isNewTask","isRemovedTask","Object","entries","reduce","grouped","forEach","removedTask","modifiedTask","l","handleDragAndDrop","dragDropResult","draggableId","source","destination","sourceStatus","droppableId","sourceIndex","index","destinationStatus","destinationIndex","taskStatus","undoDragAndDrop","TaskLists","showDetail","listActions","onDragEnd","result","taskId","updateTask","catch","TaskList","key","TaskListsContainer","css","provided","ref","innerRef","droppableProps","ListContainer","ListTitle","i","ListItem","ListButton","h2","black","light1","DraggableListItem","draggableProps","dragHandleProps","white","light2","TaskDetailModal","closeModal","changeTaskStatus","deleteTask","PositionedModal","open","shouldClose","FullWidthButton","user_id","Modal","Button","Board","setTasks","loading","data","addTaskMutation","updateTaskMutation","deleteTaskMutation","currentTasks","updated","updates","isSpecifiedTask","updatedTask","useTasks","currentTask","setCurrentTask","updateCurrentTask","close","show","useTaskDetailView","TaskDetailView","TaskBoard","App","AppContainer","RequireAuthentication","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2WAIMA,EAAM,IAAIC,IAAa,CAAEC,GADV,gCAGfC,EAAkBC,qBAAsCC,GAqD/CC,EA3CY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEtBC,EAASJ,SAAaJ,GAFe,EAGnBI,WAAeJ,EAAIS,aAHA,mBAGpCC,EAHoC,KAG9BC,EAH8B,KAI3CP,aAAgB,WACdO,EAAQX,EAAIS,eACX,CAACD,EAAOI,QAAQH,cAGnB,IAAMI,EAAY,uCAAG,WAAOC,EAAeC,GAAtB,SAAAC,EAAA,sEAENhB,EAAIiB,KAAKC,cAAcL,aAAaC,EAAOC,GAFrC,mFAAH,wDAqBZI,EAAqB,CACzBjB,GA5CiB,8BA6CjBQ,OACAU,MAlBS,uCAAG,WAAON,EAAeC,GAAtB,eAAAC,EAAA,6DAENK,EAAcpB,IAAqBiB,cAAcJ,EAAOC,GAFlD,SAGNf,EAAIoB,MAAMC,GAHJ,OAIZV,EAAQX,EAAIS,aAJA,2CAAH,wDAmBTa,OAXU,uCAAG,sBAAAN,EAAA,sEAEPhB,EAAIsB,SAFG,OAGbX,EAAQX,EAAIS,aAHC,2CAAH,qDAYVI,gBAEF,OACE,gBAACV,EAAgBoB,SAAjB,CAA0BC,MAAOL,GAC9BZ,IAMMkB,EAAc,WACzB,IAAMzB,EAAMI,aAAiBD,GAC7B,IAAKH,EACH,MAAM,IAAI0B,MAAM,yDAElB,OAAO1B,G,kDC9CM2B,EAXuB,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,EACjCkB,IAAbvB,EAD8C,EAC9CA,GAAIQ,EAD0C,EAC1CA,KAD0C,EAE1BN,WAC1BwB,EAAmB1B,EAAIQ,IAH6B,mBAE/CmB,EAF+C,KAEvCC,EAFuC,KAStD,OAJA1B,aAAgB,WACd0B,EAAUF,EAAmB1B,EAAIQ,MAChC,CAACR,EAAIQ,IAED,gBAAC,IAAD,CAAgBmB,OAAQA,GAAStB,IAK1C,SAASqB,EAAmBG,EAAoBrB,GAC9C,IAAMsB,EAAW,wDAAoDD,EAApD,YACXE,EAAW,IAAIC,IAAS,CAAEC,IAAKH,IAC/BI,EAA0BC,YAAU,uCAAC,WAAOC,EAAP,kBAAAtB,EAAA,6DAAYuB,EAAZ,EAAYA,QAAZ,kBAA2B,CACpEA,QAAQ,2BACHA,GADE,IAELC,cAAc,UAAD,OAAY9B,EAAK+B,iBAHS,2CAAD,yDAO1C,OAAO,IAAIC,IAAa,CACtBC,KAAMP,EAAwBQ,OAAOX,GACrCY,MAAO,IAAIC,M,ygCCzBf,IAuJeC,EAvJe,WAC5B,IAAM/C,EAAMyB,IADsB,EAIVrB,WAAqC,SAJ3B,mBAI3B4C,EAJ2B,KAIrBC,EAJqB,OAUR7C,WAAuB,IAVf,mBAU3BU,EAV2B,KAUpBoC,EAVoB,OAWF9C,WAAuB,IAXrB,mBAW3BW,EAX2B,KAWjBoC,EAXiB,KAalC/C,aAAgB,WACd8C,EAAS,IACTC,EAAY,IACZC,EAAS,MACR,CAACJ,IAjB8B,MAmBR5C,WAGvB,IAtB+B,mBAmB3BiD,EAnB2B,KAmBpBD,EAnBoB,KAwBlC,SAASE,EAA0BC,GACjCC,QAAQH,MAAME,GAD+B,MAiIjD,SAAkCA,GAAa,IAAD,EACtCE,EAAQF,EAAIG,QAAQC,MAAM,KAC1BC,EAASH,EAAMA,EAAMI,OAAS,GAAGC,YACvC,IAAKF,EAAQ,MAAO,CAAEG,OAAQ,GAAIL,QAAS,IAC3C,IAAMM,EAAW,YAAG,oGAAH,sBACXC,EAAQL,EAAOK,MAAMD,GALiB,mBAMhBC,QANgB,IAMhBA,OANgB,EAMhBA,EAAOC,cANS,QAMC,GAArCH,EANoC,EAMpCA,OAAQL,EAN4B,EAM5BA,QAChB,MAAO,CAAEK,SAAQL,WAtIaS,CAAyBZ,GAA7CQ,EAFqC,EAErCA,OAER,OAJ6C,EAE7BL,SACaK,GAE3B,IAAK,mBACHX,GAAS,SAACgB,GAAD,mBAAC,eAAkBA,GAAnB,IAA4BtD,MAAO,8BAC5C,MACF,IAAK,4BACL,IAAK,mBACL,IAAK,MACHsC,GAAS,SAACG,GAAD,mBAAC,eAAcA,GAAf,IAAoBxC,SAAU,2BACvC,MACF,IAAK,sBACL,IAAK,MACHqC,GAAS,SAACG,GAAD,mBAAC,eAAcA,GAAf,IAAoBzC,MAAO,oCACpC,MACF,IAAK,gDACL,IAAK,MACHsC,GAAS,SAACG,GAAD,mBAAC,eACLA,GADI,IAEPxC,SAAU,uDAMlB,IAAMsD,EAAW,uCAAG,sBAAArD,EAAA,6DAClBoC,GAAS,SAACkB,GAAD,mBAAC,eAAYA,GAAb,IAAgBvD,cAAUV,OADjB,kBAGHL,EAAIoB,MAAMN,EAAOC,GAHd,wEAKhBuC,EAA0B,EAAD,IALT,yDAAH,qDASXiB,EAA0B,uCAAG,4BAAAvD,EAAA,yDAC3BwD,EAAsBC,IAAUC,QAAQ5D,GAC9CsC,GAAS,SAACkB,GAAD,mBAAC,eAAYA,GAAb,IAAgBvD,cAAUV,QAC/BmE,EAH6B,0CAMvBxE,EAAIa,aAAaC,EAAOC,GAND,uBAOhBsD,IAPgB,0EAS7Bf,EAA0B,EAAD,IATI,gCAY/BF,GAAS,SAACG,GAAD,mBAAC,eAAcA,GAAf,IAAoBzC,MAAO,yBAZL,0DAAH,qDAgBhC,OACE,gBAAC6D,EAAD,KACE,gBAAC,IAAD,KACE,gBAACC,EAAD,KACE,gBAACC,EAAD,KACE,gBAACC,EAAD,KACY,UAAT9B,EAAmB,SAAW,wBAGnC,gBAAC6B,EAAD,KACE,gBAAC,IAAD,CACEE,KAAK,QACLC,MAAM,QACNC,YAAY,yBACZC,SAAU,SAACZ,GACTlB,GAAS,SAACkB,GAAD,mBAAC,eAAYA,GAAb,IAAgBxD,WAAOT,OAChC6C,EAASoB,EAAEa,OAAO3D,QAEpBA,MAAOV,EACPsE,MACE/B,EAAMvC,MACF,QACA2D,IAAUC,QAAQ5D,GAClB,QACA,OAENuE,aAAchC,EAAMvC,SAGxB,gBAAC+D,EAAD,KACE,gBAAC,IAAD,CACEE,KAAK,WACLC,MAAM,WACNE,SAAU,SAACZ,GACTnB,EAAYmB,EAAEa,OAAO3D,QAEvBA,MAAOT,EACPqE,MACE/B,EAAMtC,SAAW,QAAUsC,EAAMtC,SAAW,QAAU,OAExDsE,aAAchC,EAAMtC,YAGd,UAATiC,EACC,gBAAC,IAAD,CAAQsC,QAAQ,UAAUC,QAAS,kBAAMlB,MAAzC,UAIA,gBAAC,IAAD,CACEiB,QAAQ,UACRC,QAAS,kBAAMhB,MAFjB,YAOF,gBAACiB,EAAD,KACE,gBAACC,EAAD,KACY,UAATzC,EACG,yBACA,4BAEN,gBAAC0C,EAAD,CACEH,QAAS,SAACjB,GACRA,EAAEqB,iBArId1C,GAAQ,SAAC2C,GAAD,MAA0B,UAAZA,EAAsB,WAAa,aAyIrC,UAAT5C,EAAmB,oBAAsB,wBAoBxD,IAAMwC,EAAkBK,IAAOC,IAAV,KAOfL,EAAaI,IAAOE,KAAV,KAIVL,EAAaG,IAAOG,OAAV,IAILC,WAASC,MAAMC,OAGpBxB,EAAYkB,IAAOC,IAAV,KAOTlB,EAASiB,IAAOC,IAAV,KASNhB,EAAee,IAAOO,GAAV,KAKZvB,EAAegB,IAAOC,IAAV,K,oXC9MlB,IAaeO,EAbU,WAAO,IAAD,EACJ5E,IAAjBf,EADqB,EACrBA,KAAMY,EADe,EACfA,OACRgF,EAAsC,OAAG5F,QAAH,IAAGA,OAAH,EAAGA,EAAM4F,QAC/CxF,EAAK,OAAGwF,QAAH,IAAGA,OAAH,EAAGA,EAASxF,MACvB,OACE,gBAAC,GAAD,KACE,gBAACyF,GAAD,KAAezF,GACf,gBAAC,IAAD,CAAQ0F,KAAK,SAASjB,QAAS,kBAAMjE,MAArC,YAQAqD,GAAYkB,IAAOC,IAAV,IAGCG,WAASQ,KAAKC,MAUxBH,GAAeV,IAAOC,IAAV,K,u3CC3BX,IAAMa,GAAsBC,KAAH,MA+BzB,SAASC,GAAoBC,GAC5B,OAAOC,KAAmFJ,GAAqBG,GAQhH,IAAME,GAAkBJ,KAAH,MAkCrB,SAASK,GAAmBH,GAC3B,OAAOC,KAAoFC,GAAiBF,GAK7G,IAAMI,GAAqBN,KAAH,MAmCxB,SAASO,GAAsBL,GAC9B,OAAOC,KAA0FG,GAAoBJ,GAKtH,IAAMM,GAAqBR,KAAH,MAkCxB,SAASS,GAAsBP,GAC9B,OAAOC,KAA0FK,GAAoBN,GAKtH,IC7JKQ,GD6JCC,GAAkBX,KAAH,M,ysBEjJrB,SAASY,GAAT,GAA4C,IAAxBC,EAAuB,EAAvBA,KACjBC,EAAmBD,EAAnBC,SAAUC,EAASF,EAATE,KACZ5D,EAAS0D,EAAK1D,OACd6D,EAAcC,GAAaC,IAAI/D,GAC/BgE,EAAgBC,GAAeF,IAAI/D,GACzC,OACE,gCACE,gBAACkE,GAAD,KACE,gBAACC,GAAD,CAAUxH,KAAMgH,IAChB,gBAACS,GAAD,CACEC,gBAAe,OAAER,QAAF,IAAEA,OAAF,EAAEA,EAAaS,WAC9BC,UAAS,OAAEV,QAAF,IAAEA,OAAF,EAAEA,EAAaW,MAEvBR,IAGL,gBAACE,GAAD,KACE,gBAACO,GAAD,KACE,4BAAOb,MAYV,SAASc,GAAT,GAGqC,IAF1CC,EAEyC,EAFzCA,MACAC,EACyC,EADzCA,aAEQ5E,EAAiB2E,EAAjB3E,OAAQ4D,EAASe,EAATf,KACRiB,EAAwCD,EAAxCC,YAAaC,EAA2BF,EAA3BE,YAAaC,EAAcH,EAAdG,UAC5BlB,EAAcC,GAAaC,IAAI/D,GAC/BgE,EAAgBC,GAAeF,IAAI/D,GAEzC,OACE,gCACE,gBAACkE,GAAD,KACE,gBAACE,GAAD,CACEC,gBAAe,OAAER,QAAF,IAAEA,OAAF,EAAEA,EAAaS,WAC9BC,UAAS,OAAEV,QAAF,IAAEA,OAAF,EAAEA,EAAaW,MAEvBR,IAGL,gBAACE,GAAD,KACE,gBAACc,GAAD,CACE9D,YAAY,kBACZC,SAAU,SAACZ,GACTsE,EAAY,2BACPF,GADM,IAETf,KAAMrD,EAAEa,OAAO3D,UAGnBA,MAAOmG,KAGX,gBAACM,GAAD,KACE,gBAAC,GAAD,CACE1C,QAAS,WACPsD,MAFJ,UAOA,gBAAC,GAAD,CACEtD,QAAO,sBAAE,sBAAAvE,EAAA,sEACD8H,IADC,2CAGTE,UAAWN,EAAMf,MAJnB,U,SDjFIL,K,oBAAAA,E,YAAAA,E,yBAAAA,Q,KC8FZ,IAAMU,GAAiB,IAAIiB,IAAwB,CACjD,CAAC3B,GAAW4B,KAAM,QAClB,CAAC5B,GAAW6B,WAAY,eACxB,CAAC7B,GAAW8B,SAAU,cAKlBvB,GAAe,IAAIoB,IAA6B,CACpD,CACE3B,GAAW4B,KACX,CAAEb,WAAYpC,WAASoD,KAAK3C,KAAM6B,KAAMtC,WAASQ,KAAK6C,SAExD,CACEhC,GAAW6B,WACX,CAAEd,WAAYpC,WAASsD,OAAO7C,KAAM6B,KAAMtC,WAASQ,KAAKN,QAE1D,CACEmB,GAAW8B,SACX,CAAEf,WAAYpC,WAASC,MAAMQ,KAAM6B,KAAMtC,WAASQ,KAAK6C,WAIrDP,GAAalD,YAAO2D,IAAP3D,CAAH,MASV4D,GAAsC,SAACC,GAAD,OAC1C,gBAAC,IAAD,eAAQpE,QAAQ,WAAcoE,GAA9B,QAKIC,GAAsC,SAACD,GAAD,OAC1C,gBAAC,IAAD,eAAQpE,QAAQ,UAAaoE,GAA7B,WASF,SAASxB,GAAT,GAA4C,IAAxBxH,EAAuB,EAAvBA,KACZkJ,GAAY,OAAJlJ,QAAI,IAAJA,OAAA,EAAAA,EAAMkJ,QAAS,kBACvBC,GAAe,OAAJnJ,QAAI,IAAJA,OAAA,EAAAA,EAAMiH,OAAQ,cAC/B,OACE,gBAACmC,GAAD,KACE,gBAACC,GAAD,CAAQC,IAAKJ,IACb,gBAACK,GAAD,KAAWJ,IAIjB,IAAMC,GAAoBjE,IAAOC,IAAV,MAQjBmE,GAAWpE,IAAOC,IAAV,MAIRiE,GAASlE,IAAOC,KACpB,SAAC4D,GAAD,6CAC2BA,EAAMM,IADjC,yZAeI/B,GAAMpC,IAAOC,IAAV,MASH0C,GAAO3C,IAAOC,IAAV,MAMJqC,GAAStC,IAAOC,KAIpB,SAAC4D,GAAD,sJAMoBA,EAAMtB,iBAAmB,YAN7C,mEASSsB,EAAMpB,WAAa,QAT5B,gC,2GCvMa,SAAS4B,GAAT,GAAgE,IAA5CzC,EAA2C,EAA3CA,KACjC,OACE,gBAAC,IAAD,KACE,gBAAC,GAAD,KACE,gBAACD,GAAD,CAAUC,KAAMA,MAWjB,SAAS0C,GAAT,GAGqC,IAF1CzB,EAEyC,EAFzCA,MACAC,EACyC,EADzCA,aAEA,OACE,gBAAC,IAAD,KACE,gBAAC,GAAD,KACE,gBAACF,GAAD,CAAeC,MAAOA,EAAOC,aAAcA,MAMnD,IAAM/D,GAASiB,IAAOC,IAAV,M,SCpBG,SAASsE,GACtBC,GACuC,IAAD,EACZjK,WAAiC,MADrB,mBAC/BsI,EAD+B,KACxB4B,EADwB,KAEhCC,EA6BR,SAA0B7B,GAA4C,IAAD,EACzBtI,gBACxCC,GAFiE,mBAC5DkK,EAD4D,KAC7CC,EAD6C,QJmJjC1D,EI/IS,CACzC2D,YAAa,YAA6B,IAA1B/J,EAAyB,EAAzBA,KACd8C,QAAQkH,IAAI,OAAQhK,GAChBA,GACF8J,EAAiB9J,KJ4IRqG,KAA+EQ,GAAiBT,IIhJxG6D,EAJ4D,oBJmJ9D,IAA6B7D,EIhIlC,OANA1G,aAAgB,YACd,OAAIsI,QAAJ,IAAIA,OAAJ,EAAIA,EAAOhB,WACTiD,EAAa,CAAEC,UAAW,CAAEC,OAAQnC,EAAMhB,cAE3C,CAACgB,EAAOiC,IAEJJ,EAhDeO,CAAiBpC,GAEjCqC,EAA4B,CAChCC,YAAa,SAACtC,GACRA,GACF4B,EAAS5B,IAGbE,YAAa,SAACqC,GACZX,EAASW,IAEXpC,YAAa,WACXyB,EAAS,OAEXxB,UAAU,WAAD,4BAAE,sBAAA9H,EAAA,0DACL0H,EADK,gCAED2B,EAAYa,QAAZ,2BACDxC,GADC,IAEJyC,IAAK,IAAIC,KAAKC,SACd3D,SAAQ,OAAE6C,QAAF,IAAEA,SAAiBlK,EAC3BiL,WAAY,gBANP,OAQPhB,EAAS,MARF,2CAAF,kDAAC,IAYZ,MAAO,CAAC5B,EAAOqC,G,qDCzCjB,SAASQ,GAAS9D,EAAY1D,GAC5B,OAAO0D,EAAK1D,SAAWA,EAGzB,IAAMyH,GAAa,SAAC/D,GAAD,OAAgB8D,GAAS9D,EAAMH,GAAW4B,OACvDuC,GAAmB,SAAChE,GAAD,OAAgB8D,GAAS9D,EAAMH,GAAW6B,aAC7DuC,GAAiB,SAACjE,GAAD,OAAgB8D,GAAS9D,EAAMH,GAAW8B,WAoC3DuC,GAAU,SAACC,EAAe1L,GAC9B,OAAO0L,EAAMC,MAAK,SAACpE,GAAD,OAAgBA,EAAK0D,MAAQjL,MAW3C4L,GAAoB,SAAC/H,GAAD,OACxBgI,KAA4BA,KAAS,SAAUhI,KAElC,SAASiI,GAAaJ,GAAqC,IAAD,EAC7CxL,WA3CR,SAACwL,GACnB,IAAMK,EAAYL,EAAMM,OAAOV,IACzBW,EAAkBP,EAAMM,OAAOT,IAC/BW,EAAgBR,EAAMM,OAAOR,IAEnC,MAAO,CACL,CACE3H,OAAQuD,GAAW4B,KACnBmD,YAAa,OACbT,MAAOK,EACPK,aAAcL,EAAUM,KAAI,SAACC,GAAD,OAAOA,EAAErB,QAEvC,CACEpH,OAAQuD,GAAW6B,WACnBkD,YAAa,cACbT,MAAOO,EACPG,aAAcH,EAAgBI,KAAI,SAACC,GAAD,OAAOA,EAAErB,QAE7C,CACEpH,OAAQuD,GAAW8B,SACnBiD,YAAa,WACbT,MAAOQ,EACPE,aAAcF,EAAcG,KAAI,SAACC,GAAD,OAAOA,EAAErB,SAsB3CsB,CAAYb,IAFyD,mBAChEc,EADgE,KACzDC,EADyD,KAKjEC,EAA0BxM,eAAkB,SAACwL,GACjDe,GAAS,SAACD,GAAD,OACPA,EAAMH,KAAI,SAACM,GAAD,mBAAC,eACNA,GADK,IAERjB,MAAOA,EAAMM,QAAO,SAACM,GAAD,OAAOA,EAAEzI,SAAW8I,EAAK9I,oBAGhD,IAZoE,EA0JzE,YAMwB,IALtB2I,EAKqB,EALrBA,MACAC,EAIqB,EAJrBA,SAKMG,EAAiB1M,eACrB,SAACwL,EAAe7H,GACd,IAAMgJ,EAAejB,GAAkB/H,EAAlB+H,CAA0BY,GAC/C,GAAKK,EAAL,CACA,IAAMC,EAAmB,uBACpBD,EAAaT,cADO,aAEpBV,EAAMW,KAAI,SAACC,GAAD,OAAOA,EAAErB,SAExBwB,GAAS,SAACM,GAAD,OACPA,EAAUV,KAAI,SAACM,GAAD,OACZ9I,IAAW8I,EAAK9I,OACZ8I,EADJ,2BAGSE,GAHT,IAIMnB,MAAM,GAAD,oBAAMmB,EAAanB,OAAnB,aAA6BA,IAClCU,aAAcY,MAAMC,KAAK,IAAIC,IAAIJ,eAK7C,CAACN,EAAOC,IAGJU,EAAgBjN,eACpB,SAACqH,EAAY1D,EAAoBuJ,GAC/B,IAAMP,EAAejB,GAAkB/H,EAAlB+H,CAA0BY,GAC/C,GAAKK,EAAL,CACA,IAAIC,EAAkD,GAEpDA,EADEM,EACoBvB,KACpBuB,EACA7F,EAAK0D,IACL4B,EAAaT,cAGI,uBAAOS,EAAaT,cAApB,CAAkC7E,EAAK0D,MAE5DwB,GAAS,SAACM,GAAD,OACPA,EAAUV,KAAI,SAACM,GAAD,OACZ9I,IAAW8I,EAAK9I,OACZ8I,EADJ,2BAGSE,GAHT,IAIMnB,MAAM,GAAD,oBAAMmB,EAAanB,OAAnB,CAA0BnE,IAC/B6E,aAAcY,MAAMC,KAAK,IAAIC,IAAIJ,eAK7C,CAACN,EAAOC,IAGJY,EAAqBnN,eACzB,SAACqH,EAAY1D,GACX,IAAMgJ,EAAejB,GAAkB/H,EAAlB+H,CAA0BY,GAC/C,GAAKK,EAAL,CACA,IAAMC,EAEFD,EAAaT,aAAaJ,QAAO,SAAChM,GAAD,OAAQA,IAAOuH,EAAK0D,OACzDwB,GAAS,SAACM,GAAD,OACPA,EAAUV,KAAI,SAACM,GAAD,OACZ9I,IAAW8I,EAAK9I,OACZ8I,EADJ,2BAGSE,GAHT,IAIMnB,MAAOmB,EAAanB,MAAMM,QAAO,SAACM,GAAD,OAAOA,EAAErB,MAAQ1D,EAAK0D,OACvDmB,aAAcY,MAAMC,KAAK,IAAIC,IAAIJ,eAK7C,CAACN,EAAOC,IAGJa,EAAWpN,eACf,SACEqH,EACAgG,EACAC,EACAC,EACAC,GAEAL,EAAmB9F,EAAMgG,GACzBJ,EAAc5F,EAAMkG,EAAWC,KAEjC,CAACL,EAAoBF,IAGjBQ,EAAmBzN,eACvB,SAACqH,EAAY1D,EAAoB+J,GAC/B,IAAMf,EAAejB,GAAkB/H,EAAlB+H,CAA0BY,GAC/C,GAAKK,EAAL,CACA,IAAMgB,EAAWhB,EAAaT,aAAa0B,WACzC,SAAC9N,GAAD,OAAQA,IAAOuH,EAAK0D,OAEhB6B,EAAkDjB,KACtDgC,EACAD,EACAf,EAAaT,cAEfK,GAAS,SAACM,GAAD,OACPA,EAAUV,KAAI,SAACM,GAAD,OACZ9I,IAAW8I,EAAK9I,OACZ8I,EADJ,2BAGSE,GAHT,IAIMT,aAAcY,MAAMC,KAAK,IAAIC,IAAIJ,eAK7C,CAACN,EAAOC,IAGV,MAAO,CACLG,iBACAS,qBACAC,WACAK,oBApQsBI,CAAsB,CAC5CvB,QACAC,aANAG,EAfqE,EAerEA,eACAS,EAhBqE,EAgBrEA,mBACAC,EAjBqE,EAiBrEA,SACAK,EAlBqE,EAkBrEA,iBAMIK,EAAmB9N,WACzBA,aAAgB,WACd,GAAI8N,EAAiBtN,QAAS,CAC5B,IAuBoE,EAvB9DuN,EAAgBD,EAAiBtN,QACjCwN,EAAexC,EAMfyC,EAAWD,EAAalC,QAC5B,SAACzE,GAAD,OALA6G,QAAQ3C,GAAQwC,EAKmB1G,EALI0D,SAOnCoD,EAAeJ,EAAcjC,QACjC,SAACzE,GAAD,OANA6G,QAAQ3C,GAAQyC,EAMkB3G,EANI0D,SASlCqD,EAAgBJ,EAAalC,QAAO,SAACzE,GACzC,IAAMgH,EAAYH,QAAQ3C,GAAQ0C,EAAU5G,EAAK0D,MAC3CuD,EAAgBJ,QAAQ3C,GAAQ4C,EAAc9G,EAAK0D,MACzD,OAAIsD,IAAaC,GACJ/C,GAAQwC,EAAe1G,EAAK0D,KACjBpH,SAAW0D,EAAK1D,UAI1C,GAAIsK,EAASxK,QAAU0K,EAAa1K,QAAU2K,EAAc3K,OAE1D8K,OAAOC,QACLP,EAASQ,QACP,SAACC,EAASrH,GAAV,mBAAC,eACIqH,GADL,mBAEGrH,EAAK1D,OAFR,uBAEqB+K,EAAQrH,EAAK1D,SAFlC,CAEyD0D,SAH3D,oBAMKH,GAAW4B,KAAO,IANvB,eAOK5B,GAAW6B,WAAa,IAP7B,eAQK7B,GAAW8B,SAAW,IAR3B,KAWA2F,SAAQ,YAAsB,IAAD,mBAAnBhL,EAAmB,KAAX6H,EAAW,KAC7BkB,EAAelB,EAAO7H,MAGxBwK,EAAaQ,SAAQ,SAACC,GACpBzB,EAAmByB,EAAY7D,IAAK6D,EAAYjL,WAGlDyK,EAAcO,SAAQ,SAACE,GACrB,IACMxB,EAAaU,EAActC,MADd,SAACW,GAAD,OAAaA,EAAErB,MAAQ8D,EAAa9D,OACIpH,OACrDgK,EAAYrB,EAAMb,MACtB,SAACqD,GAAD,OAAOA,EAAEnL,SAAW0J,KACInB,aAAa0B,WACrC,SAAC9N,GAAD,OAAQA,IAAO+O,EAAa9D,OAExBwC,EAAYsB,EAAalL,OAC/ByJ,EAASyB,EAAcxB,EAAyBM,EAAUJ,MAE5Df,EAAwBhB,GAG5BsC,EAAiBtN,QAAUgL,IAC1B,CACDA,EACAc,EACAI,EACAS,EACAC,EACAZ,IAGF,IAAMuC,EAAoB,SAACC,GAAgC,IACjDC,EAAqCD,EAArCC,YAAaC,EAAwBF,EAAxBE,OAAQC,EAAgBH,EAAhBG,YAC7B,GAAKA,EAAL,CAEA,IACM9H,EAAOkE,GAAQC,EADNyD,GAEMG,EAAqCF,EAAlDG,YAAkCC,EAAgBJ,EAAvBK,MAEpBC,EAEXL,EAFFE,YACOI,EACLN,EADFI,MAGEH,IAAiBI,EAEfF,IAAgBG,GAElBhC,EACEpG,EACAqI,GAAWhI,IAAI0H,IAAiBlI,GAAW4B,KAC3C2G,GAKJrC,EACE/F,EACAqI,GAAWhI,IAAI0H,GACfE,EACAI,GAAWhI,IAAI8H,GACfC,KAaN,MAAO,CAAEnD,QAAO3B,QAAS,CAAEoE,oBAAmBY,gBARtB,SAACX,GACvB,IAAME,EAAM,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAgBG,YACzBA,EAAW,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAgBE,OAChCA,GAAUC,GACZJ,EAAkB,2BAAKC,GAAN,IAAsBE,SAAQC,oB,stCCnL9C,IAAMO,GAAa,IAAI7G,IAAwB,CACpD,CAAC,OAAQ3B,GAAW4B,MACpB,CAAC,aAAc5B,GAAW6B,YAC1B,CAAC,WAAY7B,GAAW8B,YASnB,SAAS4G,GAAUtG,GAA4C,IAC5DkC,EAAmClC,EAAnCkC,MAAOvB,EAA4BX,EAA5BW,YAAa4F,EAAevG,EAAfuG,WADuC,EAE3BjE,GAAaJ,GAA7Cc,EAF2D,EAE3DA,MAAgBwD,EAF2C,EAEpDnF,QA0Bf,OACE,aAAC,GAAD,CAAoBoF,UAzBJ,SAACC,GAAuB,IAGzBC,EAIXD,EAJFf,YAHsC,EAOpCe,EAHFb,YAA4BK,GAJU,aAIY,CAChDH,YAAa,MALuB,GAIvBA,YAKjB,GAAKG,EAAL,CAEAM,EAAYf,kBAAkBiB,GAE9B,IAAMzC,EAAYmC,GAAWhI,IAAI8H,GAC7BjC,GACFtD,EACGiG,WAAWD,EAAQ,CAClBtM,OAAQ+L,GAAWhI,IAAI6F,KAExB4C,OAAM,SAAChN,GACN2M,EAAYH,gBAAgBK,SAM/B1D,EAAMH,KAAI,YAAmD,IAAhDxI,EAA+C,EAA/CA,OAAQsI,EAAuC,EAAvCA,YAAaT,EAA0B,EAA1BA,MAAOU,EAAmB,EAAnBA,aACxC,OACE,aAACkE,GAAD,CACEC,IAAK1M,EACLA,OAAQA,EACRsI,YAAaA,EACbT,MACEU,EACGC,KAAI,SAACrM,GAAD,uBAAQ0L,EAAMC,MAAK,SAACW,GAAD,OAAOA,EAAErB,MAAQjL,YAApC,aAA2CG,KAC/C6L,OAAOoC,SAEZjE,YAAaA,EACb4F,WAAYA,QAQxB,IAAMS,GAAqD,SAAC,GAGrD,IAFLP,EAEI,EAFJA,UACA5P,EACI,EADJA,SAEA,OACE,aAAC,KAAD,CAAiB4P,UAAWA,GAC1B,oBACEQ,IAAKA,aAAF,OAQFpQ,KAaM,SAASiQ,GAAS9G,GAA2C,IAClEhJ,EAASe,IAATf,KACAqD,EAAwD2F,EAAxD3F,OAAQsI,EAAgD3C,EAAhD2C,YAAaT,EAAmClC,EAAnCkC,MAAOvB,EAA4BX,EAA5BW,YAAa4F,EAAevG,EAAfuG,WAFwB,EAG3C7F,GAAaC,GAH8B,mBAGlE3B,EAHkE,KAG3DC,EAH2D,KAKzE,OACE,aAAC,KAAD,CAAW8G,YAAa1L,IACrB,SAAC6M,GAAD,OACC,aAAC,GAAD,eAAQC,IAAKD,EAASE,UAAcF,EAASG,gBAC3C,aAACC,GAAD,KACE,aAACC,GAAD,KAAY5E,GACXT,EAAMW,KAAI,SAAC9E,EAAMyJ,GAAP,OACT,aAAC,GAAD,CACET,IAAKhJ,EAAK0D,IACVjL,GAAIuH,EAAK0D,IACTwE,MAAOuB,EACP3L,QAAS,WACP0K,EAAWxI,KAGb,aAACyC,GAAD,CAAUzC,KAAMA,QAGnBmJ,EAAS3L,YACTyD,GACC,aAACyI,GAAD,KACE,aAAChH,GAAD,CAAezB,MAAOA,EAAOC,aAAcA,MAG7CD,GACA,aAAC0I,GAAD,CACE7L,QAAS,wBACPoD,EAAaqC,YAAY,CACvBjH,SACA4D,KAAM,GACND,SAAQ,iBAAEhH,QAAF,IAAEA,OAAF,EAAEA,EAAMR,UAAR,QAAc,OAL5B,mBAmBd,IAAM0E,GAASiB,IAAOC,IAAV,MAQNmL,GAAYpL,IAAOwL,GAAV,KAIJpL,WAASqL,OAGdN,GAAgBnL,IAAOC,IAAV,KAIHG,WAASQ,KAAK8K,QAQxBJ,GAAWtL,IAAOC,IAAV,MAYR0L,GAAsD,SAAC,GAKtD,IAJLtR,EAII,EAJJA,GACAyP,EAGI,EAHJA,MACApP,EAEI,EAFJA,SACAgF,EACI,EADJA,QAEA,OACE,aAAC,KAAD,CAAW8J,YAAanP,EAAIyP,MAAOA,IAChC,SAACiB,GAAD,OACC,aAACO,GAAD,eACEN,IAAKD,EAASE,UACVF,EAASa,eACTb,EAASc,gBAHf,CAIEnM,QAASA,IAERhF,OAOL6Q,GAAavL,IAAOG,OAAV,KAGAC,WAAS0L,MAMd1L,WAASQ,KAAKN,MAEPF,WAASQ,KAAKmL,Q,wOClNzB,SAASC,GAAT,GAIuC,IAAD,EAH3CpK,EAG2C,EAH3CA,KACA4C,EAE2C,EAF3CA,YACAyH,EAC2C,EAD3CA,WAEQpR,EAASe,IAATf,KAEFqR,EAAgB,uCAAG,WAAOhO,GAAP,SAAA/C,EAAA,yDAClByG,EADkB,iEAEjB4C,EAAYiG,WAAW7I,EAAK0D,IAAK,CAAEpH,WAFlB,2CAAH,sDAKhBiO,EAAU,uCAAG,WAAOvK,GAAP,SAAAzG,EAAA,yDACZyG,EADY,iEAEX4C,EAAY2H,WAAWvK,GAFZ,OAGjBqK,IAHiB,2CAAH,sDAMhB,OACE,gBAACG,GAAD,CACEzL,KAAK,QACL0L,KAAM5D,QAAQ7G,GACd0K,YAAa,WAEX,OADAL,KACO,IAGRrK,GACC,gCACE,gBAACD,GAAD,CAAUC,KAAMA,KACX,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAM1D,UAAWuD,GAAW4B,MAC3B,gBAACkJ,GAAD,CAAiB7M,QAAS,kBAAMwM,EAAiBzK,GAAW4B,QAA5D,iBAIG,OAAJzB,QAAI,IAAJA,OAAA,EAAAA,EAAM1D,UAAWuD,GAAW6B,YAC3B,gBAACiJ,GAAD,CACE7M,QAAS,kBAAMwM,EAAiBzK,GAAW6B,cAD7C,wBAMG,OAAJ1B,QAAI,IAAJA,OAAA,EAAAA,EAAM1D,UAAWuD,GAAW8B,UAC3B,gBAACgJ,GAAD,CACE7M,QAAS,kBAAMwM,EAAiBzK,GAAW8B,YAD7C,qBAMD,UAAA3B,EAAKC,gBAAL,eAAe2K,YAAf,OAA2B3R,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAMR,KAChC,gBAACkS,GAAD,CAAiB9M,QAAQ,SAASC,QAAS,kBAAMyM,EAAWvK,KAA5D,sBAUZ,IAAMwK,GAAkBpM,YAAOyM,KAAPzM,CAAH,MAMfuM,GAAkBvM,YAAO0M,IAAP1M,CAAH,M,6KChFrB,IAce2M,GAdS,WAAO,IAAD,EPsBvB,WAIJ,IAAD,EAC0BpS,WAAuB,IADjD,mBACOwL,EADP,KACc6G,EADd,KAGQC,EAAY7L,GAAoB,CACtC4D,YAAa,SAACkI,IACZ,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAM/G,QACR6G,EAASE,EAAK/G,UAHZ8G,QAHR,EAY0BzL,KAAnB2L,EAZP,sBAa6BzL,KAAtB0L,EAbP,sBAc6BxL,KAAtByL,EAdP,oBAgBM5H,EAAO,uCAAG,WAAOzD,GAAP,uBAAAzG,EAAA,6DACR4J,EAAY,CAChBnD,KAAM,CACJ1D,OAAQ0D,EAAK1D,OACb4D,KAAMF,EAAKE,KACXD,SAAUD,EAAKC,SAAW,CAAE/E,KAAM8E,EAAKC,SAAS2K,cAAYhS,EAC5DiL,WAAY,eAGVyH,EATQ,aASWnH,GATX,kBAWSgH,EAAgB,CAAEhI,cAX3B,OAWNwF,EAXM,OAYN3I,EAZM,UAYC2I,EAAOuC,YAZR,aAYC,EAAalL,KAC1BgL,EAAS,GAAD,oBAAK7G,GAAL,CAAYnE,KAbR,wDAeZgL,EAASM,GACH,IAAIrR,MAAJ,qCAhBM,0DAAH,sDAoBP4O,EAAU,uCAAG,WAAOD,EAAgB2C,GAAvB,6BAAAhS,EAAA,yDACX4J,EAAY,CAChByF,OAAQA,EACR4C,QAAS,CACPlP,OAAM,iBAAEiP,QAAF,IAAEA,OAAF,EAAEA,EAASjP,cAAX,aAAqB1D,EAC3BsH,KAAI,iBAAEqL,QAAF,IAAEA,OAAF,EAAEA,EAASrL,YAAX,aAAmBtH,EACvBqH,SAAUsL,EAAQtL,SACd,CAAE/E,KAAMqQ,EAAQtL,SAAS2K,cACzBhS,IAGF6S,EAAkB,SAAC1G,GAAD,OAAaA,EAAErB,MAAQkF,GACzC0C,EAZW,aAYQnH,GACLmH,EAAalH,KAAKqH,GAbrB,0EAkBML,EAAmB,CAAEjI,cAlB3B,OAkBTwF,EAlBS,OAmBT+C,EAnBS,UAmBW/C,EAAOuC,YAnBlB,aAmBW,EAAalL,KACvCgL,EAAS,GAAD,oBAAK7G,EAAMM,QAAO,SAACM,GAAD,OAAQ0G,EAAgB1G,OAA1C,CAA+C2G,KApBxC,wDAsBfV,EAASM,GACH,IAAIrR,MAAM,yBAvBD,0DAAH,wDA2BVsQ,EAAU,uCAAG,WAAOvK,GAAP,iBAAAzG,EAAA,6DACX4J,EAAY,CAAEyF,OAAQ5I,EAAK0D,KAC3B4H,EAFW,aAEQnH,GAFR,kBAITkH,EAAmB,CAAElI,cAJZ,OAKf6H,EAAS,aAAI7G,EAAMM,QAAO,SAACM,GAAD,OAAOA,EAAErB,MAAQ1D,EAAK0D,SALjC,sDAOfsH,EAASM,GACH,IAAIrR,MAAM,yBARD,yDAAH,sDAYhB,MAAO,CACLkK,QACA8G,UACA3H,QAAS,CACPG,UACAoF,aACA0B,eO1G6CoB,GAAzCxH,EADoB,EACpBA,MAAO8G,EADa,EACbA,QAAkBrI,EADL,EACJU,QADI,EDqFvB,SACLa,GAOC,IAAD,EACsCxL,WAA4B,MADlE,mBACOiT,EADP,KACoBC,EADpB,KAEMC,EAAoBnT,eACxB,SAACwL,GACC,GAAIyH,EAAa,CACf,IAAM5L,EAAOmE,EAAMC,MAAK,SAACW,GAAD,OAAaA,EAAErB,MAAQkI,EAAYlI,OACvD1D,GAAM6L,EAAe7L,MAG7B,CAAC4L,IAUH,SAASG,IACPF,EAAe,MAYjB,OArBAlT,aAAgB,WACdmT,EAAkB3H,KACjB,CAACA,EAAO2H,IAmBJ,CATsC,SAAC,GAAD,IAAGlJ,EAAH,EAAGA,YAAH,OAC3C,gBAACwH,GAAD,CACEpB,IAAG,OAAE4C,QAAF,IAAEA,OAAF,EAAEA,EAAalI,IAClB1D,KAAM4L,EACNhJ,YAAaA,EACbyH,WAAY0B,KAIG,CAAEC,KAjBrB,SAAchM,GACZ6L,EAAe7L,IAgBU+L,UC3HQE,CAAkB9H,GAFzB,mBAErB+H,EAFqB,KAEHF,EAFG,KAEHA,KAEzB,OACE,gBAACG,GAAD,KACE,gBAAC,EAAD,OACElB,GACA,gBAAC1C,GAAD,CAAWpE,MAAOA,EAAOvB,YAAaA,EAAa4F,WAAYwD,IAEjE,gBAACE,EAAD,CAAgBtJ,YAAaA,MAM7BuJ,GAAY/N,IAAOC,IAAV,M,qPChBf,IASe+N,GATO,SAACnK,GACrB,OACE,kBAAC,EAAD,KACE,kBAACoK,GAAD,KACE,kBAACC,GAAD,SAOFD,GAAejO,IAAOC,IAAV,MAUlB,SAASiO,KACP,IAAM/T,EAAMyB,IACZ,OAAKzB,EAGEA,EAAIU,KACT,kBAAC,EAAD,KACE,kBAAC,GAAD,OAGF,kBAAC,EAAD,MAPO,wCCnBS4N,QACW,cAA7B0F,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjQ,MACvB,2DCZNkQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdtE,OAAM,SAAAlN,GACLG,QAAQH,MAAMA,EAAMK,c","file":"static/js/main.a0b1e57c.chunk.js","sourcesContent":["import * as React from \"react\";\nimport * as RealmWeb from \"realm-web\";\n\nconst REALM_APP_ID = \"task-tracker-tutorial-qnqfu\";\nconst app = new RealmWeb.App({ id: REALM_APP_ID });\n\nconst RealmAppContext = React.createContext<IRealmApp | void>(undefined);\n\ninterface IRealmApp {\n  id: string;\n  user: Realm.User | null;\n  logIn: (email: string, password: string) => Promise<void>;\n  logOut: () => Promise<void>;\n  registerUser(email: string, password: string): Promise<void>;\n}\n\nconst RealmApp: React.FC = ({ children }) => {\n  // Keep track of the current user in local state\n  const appRef = React.useRef(app);\n  const [user, setUser] = React.useState(app.currentUser);\n  React.useEffect(() => {\n    setUser(app.currentUser);\n  }, [appRef.current.currentUser]);\n\n  // Let new users register an account\n  const registerUser = async (email: string, password: string) => {\n    // TODO: Register a new user with the specified email and password\n    return await app.auth.emailPassword.registerUser(email, password);\n  };\n\n  // Let registered users log in\n  const logIn = async (email: string, password: string) => {\n    // TODO: Log in with the specified email and password\n    const credentials = RealmWeb.Credentials.emailPassword(email, password);\n    await app.logIn(credentials);\n    setUser(app.currentUser);\n  };\n\n  // Let logged in users log out\n  const logOut = async () => {\n    // TODO: Log the current user out\n    await app.logOut();\n    setUser(app.currentUser);\n  };\n\n  // Provide the current user and authentication methods to the wrapped tree\n  const context: IRealmApp = {\n    id: REALM_APP_ID,\n    user,\n    logIn,\n    logOut,\n    registerUser,\n  };\n  return (\n    <RealmAppContext.Provider value={context}>\n      {children}\n    </RealmAppContext.Provider>\n  );\n};\nexport default RealmApp;\n\nexport const useRealmApp = (): IRealmApp => {\n  const app = React.useContext(RealmAppContext);\n  if (!app) {\n    throw new Error(\"You must call useRealmApp() inside of a <RealmApp />.\");\n  }\n  return app;\n};\n","import * as React from \"react\";\nimport * as RealmWeb from \"realm-web\";\nimport { useRealmApp } from \"./RealmApp\";\n\n// Apollo\nimport { ApolloClient, HttpLink, InMemoryCache, NormalizedCacheObject } from \"apollo-boost\";\nimport { setContext } from \"apollo-link-context\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n\nconst RealmApolloProvider: React.FC = ({ children }) => {\n  const { id, user } = useRealmApp();\n  const [client, setClient] = React.useState(\n    createApolloClient(id, user as RealmWeb.User)\n  );\n  React.useEffect(() => {\n    setClient(createApolloClient(id, user as RealmWeb.User));\n  }, [id, user]);\n\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n};\nexport default RealmApolloProvider;\n\n// TODO: Implement createApolloClient()\nfunction createApolloClient(realmAppId: string, user: RealmWeb.User): ApolloClient<NormalizedCacheObject> {\n  const graphql_url = `https://realm.mongodb.com/api/client/v2.0/app/${realmAppId}/graphql`;\n  const httpLink = new HttpLink({ uri: graphql_url });\n  const authorizationHeaderLink = setContext(async (_, { headers }) => ({\n    headers: {\n      ...headers,\n      Authorization: `Bearer ${user.accessToken}`,\n    },\n  }));\n\n  return new ApolloClient({\n    link: authorizationHeaderLink.concat(httpLink),\n    cache: new InMemoryCache(),\n  });\n}\n\n/*\nfunction createApolloClient(realmAppId: string, user: RealmWeb.User) {\n  const graphql_url = `https://realm.mongodb.com/api/client/v2.0/app/${realmAppId}/graphql`;\n  const httpLink = new HttpLink({ uri: graphql_url });\n  const authorizationHeaderLink = setContext(async (_, { headers }) => ({\n    headers: {\n      ...headers,\n      Authorization: `Bearer ${user.accessToken}`,\n    },\n  }));\n\n  return new ApolloClient({\n    link: authorizationHeaderLink.concat(httpLink),\n    cache: new InMemoryCache(),\n  });\n}\n*/\n","import * as React from \"react\";\nimport { useRealmApp } from \"../realm/RealmApp\";\n\nimport styled from \"@emotion/styled\";\nimport Button from \"@leafygreen-ui/button\";\nimport TextInput from \"@leafygreen-ui/text-input\";\nimport Card from \"@leafygreen-ui/card\";\nimport { uiColors } from \"@leafygreen-ui/palette\";\nimport validator from \"validator\";\n\nconst LoginScreen: React.FC = () => {\n  const app = useRealmApp();\n\n  // Toggle between logging users in and registering new users\n  const [mode, setMode] = React.useState<\"login\" | \"register\">(\"login\");\n  const toggleMode = () => {\n    setMode((oldMode) => (oldMode === \"login\" ? \"register\" : \"login\"));\n  };\n\n  // Keep track of form input state\n  const [email, setEmail] = React.useState<string>(\"\");\n  const [password, setPassword] = React.useState<string>(\"\");\n  // Whenever the mode changes, clear the form inputs\n  React.useEffect(() => {\n    setEmail(\"\");\n    setPassword(\"\");\n    setError({});\n  }, [mode]);\n  // Keep track of input validation/errors\n  const [error, setError] = React.useState<{\n    email?: string;\n    password?: string;\n  }>({});\n\n  function handleAuthenticationError(err: Error) {\n    console.error(err);\n    const { status, message } = parseAuthenticationError(err);\n    const errorType = message || status;\n    switch (errorType) {\n      case \"invalid username\":\n        setError((prevErr) => ({ ...prevErr, email: \"Invalid email address.\" }));\n        break;\n      case \"invalid username/password\":\n      case \"invalid password\":\n      case \"401\":\n        setError((err) => ({ ...err, password: \"Incorrect password.\" }));\n        break;\n      case \"name already in use\":\n      case \"409\":\n        setError((err) => ({ ...err, email: \"Email is already registered.\" }));\n        break;\n      case \"password must be between 6 and 128 characters\":\n      case \"400\":\n        setError((err) => ({\n          ...err,\n          password: \"Password must be between 6 and 128 characters.\",\n        }));\n        break;\n    }\n  }\n\n  const handleLogin = async () => {\n    setError((e) => ({ ...e, password: undefined }));\n    try {\n      return await app.logIn(email, password);\n    } catch (err) {\n      handleAuthenticationError(err);\n    }\n  };\n\n  const handleRegistrationAndLogin = async () => {\n    const isValidEmailAddress = validator.isEmail(email);\n    setError((e) => ({ ...e, password: undefined }));\n    if (isValidEmailAddress) {\n      try {\n        // Register the user and, if successful, log them in\n        await app.registerUser(email, password);\n        return await handleLogin();\n      } catch (err) {\n        handleAuthenticationError(err);\n      }\n    } else {\n      setError((err) => ({ ...err, email: \"Email is invalid.\" }));\n    }\n  };\n\n  return (\n    <Container>\n      <Card>\n        <Layout>\n          <LoginFormRow>\n            <LoginHeading>\n              {mode === \"login\" ? \"Log In\" : \"Register an Account\"}\n            </LoginHeading>\n          </LoginFormRow>\n          <LoginFormRow>\n            <TextInput\n              type=\"email\"\n              label=\"Email\"\n              placeholder=\"your.email@example.com\"\n              onChange={(e) => {\n                setError((e) => ({ ...e, email: undefined }));\n                setEmail(e.target.value);\n              }}\n              value={email}\n              state={\n                error.email\n                  ? \"error\"\n                  : validator.isEmail(email)\n                  ? \"valid\"\n                  : \"none\"\n              }\n              errorMessage={error.email}\n            />\n          </LoginFormRow>\n          <LoginFormRow>\n            <TextInput\n              type=\"password\"\n              label=\"Password\"\n              onChange={(e) => {\n                setPassword(e.target.value);\n              }}\n              value={password}\n              state={\n                error.password ? \"error\" : error.password ? \"valid\" : \"none\"\n              }\n              errorMessage={error.password}\n            />\n          </LoginFormRow>\n          {mode === \"login\" ? (\n            <Button variant=\"primary\" onClick={() => handleLogin()}>\n              Log In\n            </Button>\n          ) : (\n            <Button\n              variant=\"primary\"\n              onClick={() => handleRegistrationAndLogin()}\n            >\n              Register\n            </Button>\n          )}\n          <ToggleContainer>\n            <ToggleText>\n              {mode === \"login\"\n                ? \"Don't have an account?\"\n                : \"Already have an account?\"}\n            </ToggleText>\n            <ToggleLink\n              onClick={(e: React.MouseEvent) => {\n                e.preventDefault();\n                toggleMode();\n              }}\n            >\n              {mode === \"login\" ? \"Register one now.\" : \"Log in instead.\"}\n            </ToggleLink>\n          </ToggleContainer>\n        </Layout>\n      </Card>\n    </Container>\n  );\n};\nexport default LoginScreen;\n\nfunction parseAuthenticationError(err: Error) {\n  const parts = err.message.split(\":\");\n  const reason = parts[parts.length - 1].trimStart();\n  if (!reason) return { status: \"\", message: \"\" };\n  const reasonRegex = /(?<message>.+)\\s\\(status (?<status>[0-9][0-9][0-9])/;\n  const match = reason.match(reasonRegex);\n  const { status, message } = match?.groups ?? {};\n  return { status, message };\n}\n\nconst ToggleContainer = styled.div`\n  margin-top: 8px;\n  font-size: 12px;\n  display: flex;\n  justify-content: center;\n`;\n\nconst ToggleText = styled.span`\n  line-height: 18px;\n`;\n\nconst ToggleLink = styled.button`\n  background: none;\n  border: none;\n  font-size: 12px;\n  color: ${uiColors.green.dark2};\n`;\n\nconst Container = styled.div`\n  height: 100vh;\n  justify-content: center;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Layout = styled.div`\n  padding: 8px;\n  color: black;\n  width: 400px;\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n`;\n\nconst LoginHeading = styled.h1`\n  margin: 0;\n  font-size: 32px;\n`;\n\nconst LoginFormRow = styled.div`\n  margin-bottom: 16px;\n`;\n","import * as React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { useRealmApp } from \"../realm/RealmApp\";\nimport Button from \"@leafygreen-ui/button\";\nimport { uiColors } from \"@leafygreen-ui/palette\";\n\nconst Navbar: React.FC = () => {\n  const { user, logOut } = useRealmApp();\n  const profile: Realm.UserProfile | undefined = user?.profile\n  const email = profile?.email;\n  return (\n    <Container>\n      <LoggedInUser>{email}</LoggedInUser>\n      <Button size=\"xsmall\" onClick={() => logOut()}>\n        Logout\n      </Button>\n    </Container>\n  );\n};\nexport default Navbar;\n\nconst Container = styled.div`\n  width: 100%;\n  height: 64px;\n  background: ${uiColors.gray.base};\n  font-size: 16px;\n  color: black;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 8px 0;\n`;\n\nconst LoggedInUser = styled.div`\n  padding-bottom: 8px;\n`;\n","import * as Types from './types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\n\n\nexport const GetAllTasksDocument = gql`\n    query GetAllTasks {\n  tasks {\n    _id\n    name\n    status\n    assignee {\n      _id\n      name\n      image\n      user_id\n    }\n  }\n}\n    `;\n\n/**\n * __useGetAllTasksQuery__\n *\n * To run a query within a React component, call `useGetAllTasksQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllTasksQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllTasksQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<Types.GetAllTasksQuery, Types.GetAllTasksQueryVariables>) {\n        return ApolloReactHooks.useQuery<Types.GetAllTasksQuery, Types.GetAllTasksQueryVariables>(GetAllTasksDocument, baseOptions);\n      }\nexport function useGetAllTasksLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<Types.GetAllTasksQuery, Types.GetAllTasksQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<Types.GetAllTasksQuery, Types.GetAllTasksQueryVariables>(GetAllTasksDocument, baseOptions);\n        }\nexport type GetAllTasksQueryHookResult = ReturnType<typeof useGetAllTasksQuery>;\nexport type GetAllTasksLazyQueryHookResult = ReturnType<typeof useGetAllTasksLazyQuery>;\nexport type GetAllTasksQueryResult = ApolloReactCommon.QueryResult<Types.GetAllTasksQuery, Types.GetAllTasksQueryVariables>;\nexport const AddTaskDocument = gql`\n    mutation AddTask($task: TaskInsertInput!) {\n  task: insertOneTask(data: $task) {\n    _id\n    name\n    status\n    assignee {\n      _id\n      name\n      image\n      user_id\n    }\n  }\n}\n    `;\nexport type AddTaskMutationFn = ApolloReactCommon.MutationFunction<Types.AddTaskMutation, Types.AddTaskMutationVariables>;\n\n/**\n * __useAddTaskMutation__\n *\n * To run a mutation, you first call `useAddTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addTaskMutation, { data, loading, error }] = useAddTaskMutation({\n *   variables: {\n *      task: // value for 'task'\n *   },\n * });\n */\nexport function useAddTaskMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<Types.AddTaskMutation, Types.AddTaskMutationVariables>) {\n        return ApolloReactHooks.useMutation<Types.AddTaskMutation, Types.AddTaskMutationVariables>(AddTaskDocument, baseOptions);\n      }\nexport type AddTaskMutationHookResult = ReturnType<typeof useAddTaskMutation>;\nexport type AddTaskMutationResult = ApolloReactCommon.MutationResult<Types.AddTaskMutation>;\nexport type AddTaskMutationOptions = ApolloReactCommon.BaseMutationOptions<Types.AddTaskMutation, Types.AddTaskMutationVariables>;\nexport const UpdateTaskDocument = gql`\n    mutation UpdateTask($taskId: ObjectId!, $updates: TaskUpdateInput!) {\n  task: updateOneTask(query: {_id: $taskId}, set: $updates) {\n    _id\n    name\n    status\n    assignee {\n      _id\n      name\n      image\n      user_id\n    }\n  }\n}\n    `;\nexport type UpdateTaskMutationFn = ApolloReactCommon.MutationFunction<Types.UpdateTaskMutation, Types.UpdateTaskMutationVariables>;\n\n/**\n * __useUpdateTaskMutation__\n *\n * To run a mutation, you first call `useUpdateTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateTaskMutation, { data, loading, error }] = useUpdateTaskMutation({\n *   variables: {\n *      taskId: // value for 'taskId'\n *      updates: // value for 'updates'\n *   },\n * });\n */\nexport function useUpdateTaskMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<Types.UpdateTaskMutation, Types.UpdateTaskMutationVariables>) {\n        return ApolloReactHooks.useMutation<Types.UpdateTaskMutation, Types.UpdateTaskMutationVariables>(UpdateTaskDocument, baseOptions);\n      }\nexport type UpdateTaskMutationHookResult = ReturnType<typeof useUpdateTaskMutation>;\nexport type UpdateTaskMutationResult = ApolloReactCommon.MutationResult<Types.UpdateTaskMutation>;\nexport type UpdateTaskMutationOptions = ApolloReactCommon.BaseMutationOptions<Types.UpdateTaskMutation, Types.UpdateTaskMutationVariables>;\nexport const DeleteTaskDocument = gql`\n    mutation DeleteTask($taskId: ObjectId!) {\n  deletedTask: deleteOneTask(query: {_id: $taskId}) {\n    _id\n    name\n    status\n    assignee {\n      _id\n      name\n      image\n      user_id\n    }\n  }\n}\n    `;\nexport type DeleteTaskMutationFn = ApolloReactCommon.MutationFunction<Types.DeleteTaskMutation, Types.DeleteTaskMutationVariables>;\n\n/**\n * __useDeleteTaskMutation__\n *\n * To run a mutation, you first call `useDeleteTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTaskMutation, { data, loading, error }] = useDeleteTaskMutation({\n *   variables: {\n *      taskId: // value for 'taskId'\n *   },\n * });\n */\nexport function useDeleteTaskMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<Types.DeleteTaskMutation, Types.DeleteTaskMutationVariables>) {\n        return ApolloReactHooks.useMutation<Types.DeleteTaskMutation, Types.DeleteTaskMutationVariables>(DeleteTaskDocument, baseOptions);\n      }\nexport type DeleteTaskMutationHookResult = ReturnType<typeof useDeleteTaskMutation>;\nexport type DeleteTaskMutationResult = ApolloReactCommon.MutationResult<Types.DeleteTaskMutation>;\nexport type DeleteTaskMutationOptions = ApolloReactCommon.BaseMutationOptions<Types.DeleteTaskMutation, Types.DeleteTaskMutationVariables>;\nexport const GetUserDocument = gql`\n    query GetUser($userId: String!) {\n  user(query: {user_id: $userId}) {\n    _id\n    _partition\n    name\n    image\n    user_id\n  }\n}\n    `;\n\n/**\n * __useGetUserQuery__\n *\n * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useGetUserQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<Types.GetUserQuery, Types.GetUserQueryVariables>) {\n        return ApolloReactHooks.useQuery<Types.GetUserQuery, Types.GetUserQueryVariables>(GetUserDocument, baseOptions);\n      }\nexport function useGetUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<Types.GetUserQuery, Types.GetUserQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<Types.GetUserQuery, Types.GetUserQueryVariables>(GetUserDocument, baseOptions);\n        }\nexport type GetUserQueryHookResult = ReturnType<typeof useGetUserQuery>;\nexport type GetUserLazyQueryHookResult = ReturnType<typeof useGetUserLazyQuery>;\nexport type GetUserQueryResult = ApolloReactCommon.QueryResult<Types.GetUserQuery, Types.GetUserQueryVariables>;","import * as React from \"react\";\nimport { Task, User } from \"../types\";\n\nimport { GetAllTasksQuery } from \"./../types\";\nimport {\n  useGetAllTasksQuery,\n  useAddTaskMutation,\n  useUpdateTaskMutation,\n  useDeleteTaskMutation,\n} from \"./../graphql-operations\";\n\nexport enum TaskStatus {\n  Complete = 'COMPLETE',\n  Open = 'OPEN',\n  Inprogress = 'INPROGRESS'\n}\n\ninterface UpdatedTask {\n  status?: TaskStatus;\n  name?: string;\n  assignee?: User;\n}\n\nexport interface TaskActions {\n  addTask: (task: Task) => Promise<void>;\n  updateTask: (taskId: string, updated: UpdatedTask) => Promise<void>;\n  deleteTask: (task: Task) => Promise<void>;\n}\n\nexport function useTasks(): {\n  tasks: Array<Task>;\n  loading: boolean;\n  actions: TaskActions;\n} {\n  const [tasks, setTasks] = React.useState<Task[]>([]);\n  // Query for Tasks\n  const { loading } = useGetAllTasksQuery({\n    onCompleted: (data: GetAllTasksQuery) => {\n      if (data?.tasks) {\n        setTasks(data.tasks as Task[]);\n      }\n    },\n  });\n\n  // Create Task Mutation Functions\n  const [addTaskMutation] = useAddTaskMutation();\n  const [updateTaskMutation] = useUpdateTaskMutation();\n  const [deleteTaskMutation] = useDeleteTaskMutation();\n\n  const addTask = async (task: Task) => {\n    const variables = {\n      task: {\n        status: task.status,\n        name: task.name,\n        assignee: task.assignee ? { link: task.assignee.user_id } : undefined,\n        _partition: \"My Project\",\n      },\n    };\n    const currentTasks = [...tasks];\n    try {\n      const result = await addTaskMutation({ variables });\n      const task = result.data?.task as Task;\n      setTasks([...tasks, task]);\n    } catch (err) {\n      setTasks(currentTasks);\n      throw new Error(`Unable to add task: ${err}`);\n    }\n  };\n\n  const updateTask = async (taskId: string, updated: UpdatedTask) => {\n    const variables = {\n      taskId: taskId,\n      updates: {\n        status: updated?.status ?? undefined,\n        name: updated?.name ?? undefined,\n        assignee: updated.assignee\n          ? { link: updated.assignee.user_id }\n          : undefined,\n      },\n    };\n    const isSpecifiedTask = (t: Task) => t._id === taskId;\n    const currentTasks = [...tasks];\n    const currentTask = currentTasks.find(isSpecifiedTask);\n    if (!currentTask) {\n      return;\n    }\n    try {\n      const result = await updateTaskMutation({ variables });\n      const updatedTask: Task = result.data?.task as Task;\n      setTasks([...tasks.filter((t) => !isSpecifiedTask(t)), updatedTask]);\n    } catch (err) {\n      setTasks(currentTasks);\n      throw new Error(\"Unable to update task\");\n    }\n  };\n\n  const deleteTask = async (task: Task) => {\n    const variables = { taskId: task._id };\n    const currentTasks = [...tasks];\n    try {\n      await deleteTaskMutation({ variables });\n      setTasks([...tasks.filter((t) => t._id !== task._id)]);\n    } catch (err) {\n      setTasks(currentTasks);\n      throw new Error(\"Unable to delete task\");\n    }\n  };\n\n  return {\n    tasks,\n    loading,\n    actions: {\n      addTask,\n      updateTask,\n      deleteTask,\n    },\n  };\n}\n","import * as React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { Task, User } from \"../types\";\nimport { TaskStatus } from \"../hooks/useTasks\";\nimport { DraftTask, DraftTaskActions } from \"../hooks/useDraftTask\";\nimport Button from \"@leafygreen-ui/button\";\nimport TextInput from \"@leafygreen-ui/text-input\";\nimport { uiColors } from \"@leafygreen-ui/palette\";\n\n//added by Tom Aarts\nimport { GetAllTasksQuery } from \"./../types\";\nimport {\n  useGetAllTasksQuery,\n  useAddTaskMutation,\n  useUpdateTaskMutation,\n  useDeleteTaskMutation,\n} from \"./../graphql-operations\";\n\n\ninterface TaskViewProps {\n  task: Task;\n}\n\nexport function TaskView({ task }: TaskViewProps) {\n  const { assignee, name } = task;\n  const status = task.status as TaskStatus;\n  const statusColor = statusColors.get(status);\n  const statusMessage = statusMessages.get(status);\n  return (\n    <>\n      <Row>\n        <Assignee user={assignee} />\n        <Status\n          backgroundColor={statusColor?.background}\n          textColor={statusColor?.text}\n        >\n          {statusMessage}\n        </Status>\n      </Row>\n      <Row>\n        <Name>\n          <span>{name}</span>\n        </Name>\n      </Row>\n    </>\n  );\n}\n\ntype DraftTaskViewProps = {\n  draft: DraftTask;\n  draftActions: DraftTaskActions;\n};\n\nexport function DraftTaskView({\n  draft,\n  draftActions,\n}: DraftTaskViewProps): React.ReactElement {\n  const { status, name } = draft;\n  const { updateDraft, deleteDraft, saveDraft } = draftActions;\n  const statusColor = statusColors.get(status);\n  const statusMessage = statusMessages.get(status);\n\n  return (\n    <>\n      <Row>\n        <Status\n          backgroundColor={statusColor?.background}\n          textColor={statusColor?.text}\n        >\n          {statusMessage}\n        </Status>\n      </Row>\n      <Row>\n        <DraftInput\n          placeholder=\"Enter a task...\"\n          onChange={(e) => {\n            updateDraft({\n              ...draft,\n              name: e.target.value,\n            });\n          }}\n          value={name}\n        />\n      </Row>\n      <Row>\n        <DeleteButton\n          onClick={() => {\n            deleteDraft();\n          }}\n        >\n          Delete\n        </DeleteButton>\n        <SubmitButton\n          onClick={async () => {\n            await saveDraft();\n          }}\n          disabled={!draft.name}\n        >\n          Add\n        </SubmitButton>\n      </Row>\n    </>\n  );\n}\n\nconst statusMessages = new Map<TaskStatus, string>([\n  [TaskStatus.Open, \"Open\"],\n  [TaskStatus.Inprogress, \"In Progress\"],\n  [TaskStatus.Complete, \"Complete\"],\n]);\n\ntype StatusColor = { background: string; text: string };\n\nconst statusColors = new Map<TaskStatus, StatusColor>([\n  [\n    TaskStatus.Open,\n    { background: uiColors.blue.base, text: uiColors.gray.light3 },\n  ],\n  [\n    TaskStatus.Inprogress,\n    { background: uiColors.yellow.base, text: uiColors.gray.dark2 },\n  ],\n  [\n    TaskStatus.Complete,\n    { background: uiColors.green.base, text: uiColors.gray.light3 },\n  ],\n]);\n\nconst DraftInput = styled(TextInput)`\n  width: 100%;\n`;\n\ninterface ButtonProps {\n  disabled?: boolean;\n  onClick?: () => void;\n}\n\nconst SubmitButton: React.FC<ButtonProps> = (props) => (\n  <Button variant=\"primary\" {...props}>\n    Add\n  </Button>\n);\n\nconst DeleteButton: React.FC<ButtonProps> = (props) => (\n  <Button variant=\"danger\" {...props}>\n    Delete\n  </Button>\n);\n\ninterface AssigneeProps {\n  user?: User | null;\n}\n\nfunction Assignee({ user }: AssigneeProps) {\n  const image = user?.image || \"./no-avatar.png\";\n  const username = user?.name || \"No assignee\";\n  return (\n    <AssigneeContainer>\n      <Avatar src={image} />\n      <Username>{username}</Username>\n    </AssigneeContainer>\n  );\n}\nconst AssigneeContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding-right: 16px;\n  border-radius: 500px;\n  border: 0.5px solid transparent;\n`;\n\nconst Username = styled.div`\n  font-size: 16px;\n`;\n\nconst Avatar = styled.div<{ src: string }>(\n  (props) => `\n    background-image: url('${props.src}');\n    /* make a square container */\n    width: 24px;\n    height: 24px;\n    /* fill the container, preserving aspect ratio, and cropping to fit */\n    background-size: cover;\n    /* center the image vertically and horizontally */\n    background-position: top center;\n    /* round the edges to a circle with border radius 1/2 container size */\n    border-radius: 50%;\n    margin-right: 8px;\n`\n);\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  :not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n\nconst Name = styled.div`\n  font-size: 24px;\n  margin: 0;\n  text-align: left;\n`;\n\nconst Status = styled.div<{\n  backgroundColor?: string;\n  textColor?: string;\n}>(\n  (props) => `\n  font-size: 12px;\n  font-weight: bold;\n  line-height: 12px;\n  text-align: center;\n  border-radius: 500px;\n  background-color: ${props.backgroundColor || \"lightgray\"};\n  padding: 8px 12px;\n  margin-left: auto;\n  color: ${props.textColor || \"black\"};\n  user-select: none;\n`\n);\n\n\n//added by Tom Aarts\nexport function useTasks() {\n  const [tasks, setTasks] = React.useState<Task[]>([]);\n\n  // Query for Tasks\n\n  const { loading } = useGetAllTasksQuery({ onCompleted: (data: GetAllTasksQuery) => {\n\n    if(data?.tasks) {\n\n      setTasks(data.tasks as Task[])\n\n    }\n\n  }});\n\n\n  // Create Task Mutation Functions\n\n  const [addTaskMutation] = useAddTaskMutation();\n\n  const [updateTaskMutation] = useUpdateTaskMutation();\n\n  const [deleteTaskMutation] = useDeleteTaskMutation();\n}\n\n","import * as React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { Task } from \"../types\";\nimport { DraftTask, DraftTaskActions } from \"../hooks/useDraftTask\";\nimport Card from \"@leafygreen-ui/card\";\n\nimport { TaskView, DraftTaskView } from \"./TaskView\";\n\ninterface TaskCardProps {\n  task: Task;\n}\nexport default function TaskCard({ task }: TaskCardProps): React.ReactElement {\n  return (\n    <Card>\n      <Layout>\n        <TaskView task={task} />\n      </Layout>\n    </Card>\n  );\n}\n\ntype DraftTaskCardProps = {\n  draft: DraftTask;\n  draftActions: DraftTaskActions;\n};\n\nexport function DraftTaskCard({\n  draft,\n  draftActions,\n}: DraftTaskCardProps): React.ReactElement {\n  return (\n    <Card>\n      <Layout>\n        <DraftTaskView draft={draft} draftActions={draftActions} />\n      </Layout>\n    </Card>\n  );\n}\n\nconst Layout = styled.div`\n  padding: 8px;\n  color: black;\n`;\n","import * as React from \"react\";\nimport BSON from \"bson\";\nimport { User, GetUserQuery } from \"../types\";\nimport { TaskStatus, TaskActions } from \"./useTasks\";\nimport { useGetUserLazyQuery } from \"../graphql-operations\";\n\nexport type DraftTask = {\n  status: TaskStatus;\n  name: string;\n  assignee?: string;\n};\n\nexport interface DraftTaskActions {\n  createDraft: (draft: DraftTask) => void;\n  updateDraft: (draft: DraftTask) => void;\n  deleteDraft: () => void;\n  saveDraft: () => Promise<void>;\n}\n\nexport default function useDraftTask(\n  taskActions: TaskActions\n): [DraftTask | null, DraftTaskActions] {\n  const [draft, setDraft] = React.useState<DraftTask | null>(null);\n  const draftAssignee = useDraftAssignee(draft);\n\n  const actions: DraftTaskActions = {\n    createDraft: (draft: DraftTask) => {\n      if (draft) {\n        setDraft(draft);\n      }\n    },\n    updateDraft: (updatedDraft: DraftTask) => {\n      setDraft(updatedDraft);\n    },\n    deleteDraft: () => {\n      setDraft(null);\n    },\n    saveDraft: async () => {\n      if (draft) {\n        await taskActions.addTask({\n          ...draft,\n          _id: new BSON.ObjectId(),\n          assignee: draftAssignee ?? undefined,\n          _partition: \"My Project\",\n        });\n        setDraft(null);\n      }\n    },\n  };\n  return [draft, actions];\n}\n\nfunction useDraftAssignee(draft: DraftTask | null): User | undefined {\n  const [draftAssignee, setDraftAssignee] = React.useState<User | undefined>(\n    undefined\n  );\n  const [getUserQuery] = useGetUserLazyQuery({\n    onCompleted: ({ user }: GetUserQuery) => {\n      console.log(\"user\", user);\n      if (user) {\n        setDraftAssignee(user);\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (draft?.assignee) {\n      getUserQuery({ variables: { userId: draft.assignee } });\n    }\n  }, [draft, getUserQuery]);\n\n  return draftAssignee;\n}\n","import * as React from \"react\";\nimport { Task, Scalars } from \"../types\";\nimport { TaskStatus } from \"./useTasks\";\nimport { taskStatus } from \"../components/TaskLists\";\n\nimport * as R from \"ramda\";\nimport { DropResult } from \"react-beautiful-dnd\";\n\nfunction isStatus(task: Task, status: TaskStatus) {\n  return task.status === status;\n}\n\nconst isOpenTask = (task: Task) => isStatus(task, TaskStatus.Open);\nconst isInProgressTask = (task: Task) => isStatus(task, TaskStatus.Inprogress);\nconst isCompleteTask = (task: Task) => isStatus(task, TaskStatus.Complete);\n\ntype TaskListDescription = {\n  status: TaskStatus;\n  displayName: string;\n  tasks: Array<Task>;\n  displayOrder: Array<Scalars[\"ObjectId\"]>;\n};\n\nconst createLists = (tasks: Array<Task>) => {\n  const openTasks = tasks.filter(isOpenTask);\n  const inProgressTasks = tasks.filter(isInProgressTask);\n  const completeTasks = tasks.filter(isCompleteTask);\n\n  return [\n    {\n      status: TaskStatus.Open,\n      displayName: \"Open\",\n      tasks: openTasks,\n      displayOrder: openTasks.map((t) => t._id),\n    },\n    {\n      status: TaskStatus.Inprogress,\n      displayName: \"In Progress\",\n      tasks: inProgressTasks,\n      displayOrder: inProgressTasks.map((t) => t._id),\n    },\n    {\n      status: TaskStatus.Complete,\n      displayName: \"Complete\",\n      tasks: completeTasks,\n      displayOrder: completeTasks.map((t) => t._id),\n    },\n  ];\n};\n\nconst getTask = (tasks: Task[], id: Scalars[\"ObjectId\"]): Task | undefined => {\n  return tasks.find((task: Task) => task._id === id);\n};\n\ninterface UseTaskListsPayload {\n  lists: TaskListDescription[];\n  actions: {\n    handleDragAndDrop: (dragDropResult: DropResult) => void;\n    undoDragAndDrop: (dragDropResult: DropResult) => void;\n  };\n}\n\nconst findListForStatus = (status: TaskStatus) =>\n  R.find<TaskListDescription>(R.propEq(\"status\", status));\n\nexport default function useTaskLists(tasks: Task[]): UseTaskListsPayload {\n  const [lists, setLists] = React.useState<TaskListDescription[]>(\n    createLists(tasks)\n  );\n\n  const updateListsWithNewTasks = React.useCallback((tasks: Task[]) => {\n    setLists((lists: TaskListDescription[]) =>\n      lists.map((list) => ({\n        ...list,\n        tasks: tasks.filter((t) => t.status === list.status),\n      }))\n    );\n  }, []);\n\n  const {\n    addTasksToList,\n    removeTaskFromList,\n    moveTask,\n    moveTaskInColumn,\n  }: OrderedListActions = useOrderedListActions({\n    lists,\n    setLists,\n  });\n\n  const previousTasksRef = React.useRef<Task[] | undefined>();\n  React.useEffect(() => {\n    if (previousTasksRef.current) {\n      const previousTasks = previousTasksRef.current;\n      const updatedTasks = tasks;\n      const isInPreviousTasks = (newTask: Task) =>\n        Boolean(getTask(previousTasks, newTask._id));\n      const isInUpdatedTasks = (oldTask: Task) =>\n        Boolean(getTask(updatedTasks, oldTask._id));\n\n      const newTasks = updatedTasks.filter(\n        (task: Task) => !isInPreviousTasks(task)\n      );\n      const removedTasks = previousTasks.filter(\n        (task: Task) => !isInUpdatedTasks(task)\n      );\n      // New tasks and removed tasks can't be modified tasks. Filter them out.\n      const modifiedTasks = updatedTasks.filter((task: Task) => {\n        const isNewTask = Boolean(getTask(newTasks, task._id));\n        const isRemovedTask = Boolean(getTask(removedTasks, task._id));\n        if (isNewTask || isRemovedTask) return false;\n        const prev = getTask(previousTasks, task._id) as Task;\n        const isModified = prev.status !== task.status;\n        return isModified;\n      });\n\n      if (newTasks.length || removedTasks.length || modifiedTasks.length) {\n        // Add new tasks\n        Object.entries<Task[]>(\n          newTasks.reduce(\n            (grouped, task) => ({\n              ...grouped,\n              [task.status]: [...grouped[task.status as TaskStatus], task],\n            }),\n            {\n              [TaskStatus.Open]: [],\n              [TaskStatus.Inprogress]: [],\n              [TaskStatus.Complete]: [],\n            }\n          )\n        ).forEach(([status, tasks]) => {\n          addTasksToList(tasks, status as TaskStatus);\n        });\n        // Delete removed tasks\n        removedTasks.forEach((removedTask) => {\n          removeTaskFromList(removedTask._id, removedTask.status as TaskStatus);\n        });\n        // Update modified tasks\n        modifiedTasks.forEach((modifiedTask) => {\n          const isThisTask = (t: Task) => t._id === modifiedTask._id;\n          const oldStatus = (previousTasks.find(isThisTask) as Task).status;\n          const oldIndex = (lists.find(\n            (l) => l.status === oldStatus\n          ) as TaskListDescription).displayOrder.findIndex(\n            (id) => id === modifiedTask._id\n          );\n          const newStatus = modifiedTask.status;\n          moveTask(modifiedTask, oldStatus as TaskStatus, oldIndex, newStatus as TaskStatus);\n        });\n        updateListsWithNewTasks(tasks);\n      }\n    }\n    previousTasksRef.current = tasks;\n  }, [\n    tasks,\n    lists,\n    addTasksToList,\n    removeTaskFromList,\n    moveTask,\n    updateListsWithNewTasks,\n  ]);\n\n  const handleDragAndDrop = (dragDropResult: DropResult) => {\n    const { draggableId, source, destination } = dragDropResult;\n    if (!destination) return;\n\n    const taskId = draggableId;\n    const task = getTask(tasks, taskId) as Task;\n    const { droppableId: sourceStatus, index: sourceIndex } = source;\n    const {\n      droppableId: destinationStatus,\n      index: destinationIndex,\n    } = destination;\n\n    if (sourceStatus === destinationStatus) {\n      // Task did not change columns\n      if (sourceIndex !== destinationIndex) {\n        // Task change position within its column\n        moveTaskInColumn(\n          task,\n          taskStatus.get(sourceStatus) || TaskStatus.Open,\n          destinationIndex\n        );\n      }\n    } else {\n      // Task was moved to a different column\n      moveTask(\n        task,\n        taskStatus.get(sourceStatus) as TaskStatus,\n        sourceIndex,\n        taskStatus.get(destinationStatus) as TaskStatus,\n        destinationIndex\n      );\n    }\n  };\n\n  const undoDragAndDrop = (dragDropResult: DropResult) => {\n    const source = dragDropResult?.destination;\n    const destination = dragDropResult?.source;\n    if (source && destination) {\n      handleDragAndDrop({ ...dragDropResult, source, destination });\n    }\n  };\n\n  return { lists, actions: { handleDragAndDrop, undoDragAndDrop } };\n}\n\ninterface OrderedListActions {\n  addTasksToList: (tasks: Task[], status: TaskStatus) => void;\n  removeTaskFromList: (task: Task, status: TaskStatus) => void;\n  moveTask: (\n    task: Task,\n    oldStatus: TaskStatus,\n    oldDisplayIndex: number,\n    newStatus: TaskStatus,\n    newDisplayIndex?: number\n  ) => void;\n  moveTaskInColumn: (task: Task, status: TaskStatus, newIndex: number) => void;\n}\n\nfunction useOrderedListActions({\n  lists,\n  setLists,\n}: {\n  lists: TaskListDescription[];\n  setLists: React.Dispatch<React.SetStateAction<TaskListDescription[]>>;\n}): OrderedListActions {\n  const addTasksToList = React.useCallback(\n    (tasks: Task[], status: TaskStatus) => {\n      const listToUpdate = findListForStatus(status)(lists);\n      if (!listToUpdate) return;\n      const updatedDisplayOrder = [\n        ...listToUpdate.displayOrder,\n        ...tasks.map((t) => t._id),\n      ];\n      setLists((prevLists: TaskListDescription[]) =>\n        prevLists.map((list) =>\n          status !== list.status\n            ? list\n            : {\n                ...listToUpdate,\n                tasks: [...listToUpdate.tasks, ...tasks],\n                displayOrder: Array.from(new Set(updatedDisplayOrder)),\n              }\n        )\n      );\n    },\n    [lists, setLists]\n  );\n\n  const addTaskToList = React.useCallback(\n    (task: Task, status: TaskStatus, displayIndex?: number) => {\n      const listToUpdate = findListForStatus(status)(lists);\n      if (!listToUpdate) return;\n      let updatedDisplayOrder: Array<Scalars[\"ObjectId\"]> = [];\n      if (displayIndex) {\n        updatedDisplayOrder = R.insert(\n          displayIndex,\n          task._id,\n          listToUpdate.displayOrder\n        );\n      } else {\n        updatedDisplayOrder = [...listToUpdate.displayOrder, task._id];\n      }\n      setLists((prevLists: TaskListDescription[]) =>\n        prevLists.map((list) =>\n          status !== list.status\n            ? list\n            : {\n                ...listToUpdate,\n                tasks: [...listToUpdate.tasks, task],\n                displayOrder: Array.from(new Set(updatedDisplayOrder)),\n              }\n        )\n      );\n    },\n    [lists, setLists]\n  );\n\n  const removeTaskFromList = React.useCallback(\n    (task: Task, status: TaskStatus) => {\n      const listToUpdate = findListForStatus(status)(lists);\n      if (!listToUpdate) return;\n      const updatedDisplayOrder: Array<\n        Scalars[\"ObjectId\"]\n      > = listToUpdate.displayOrder.filter((id) => id !== task._id);\n      setLists((prevLists: TaskListDescription[]) =>\n        prevLists.map((list) =>\n          status !== list.status\n            ? list\n            : {\n                ...listToUpdate,\n                tasks: listToUpdate.tasks.filter((t) => t._id !== task._id),\n                displayOrder: Array.from(new Set(updatedDisplayOrder)),\n              }\n        )\n      );\n    },\n    [lists, setLists]\n  );\n\n  const moveTask = React.useCallback(\n    (\n      task: Task,\n      oldStatus: TaskStatus,\n      oldDisplayIndex: number,\n      newStatus: TaskStatus,\n      newDisplayIndex?: number\n    ) => {\n      removeTaskFromList(task, oldStatus);\n      addTaskToList(task, newStatus, newDisplayIndex);\n    },\n    [removeTaskFromList, addTaskToList]\n  );\n\n  const moveTaskInColumn = React.useCallback(\n    (task: Task, status: TaskStatus, newIndex: number) => {\n      const listToUpdate = findListForStatus(status)(lists);\n      if (!listToUpdate) return;\n      const oldIndex = listToUpdate.displayOrder.findIndex(\n        (id) => id === task._id\n      );\n      const updatedDisplayOrder: Array<Scalars[\"ObjectId\"]> = R.move(\n        oldIndex,\n        newIndex,\n        listToUpdate.displayOrder\n      );\n      setLists((prevLists: TaskListDescription[]) =>\n        prevLists.map((list) =>\n          status !== list.status\n            ? list\n            : {\n                ...listToUpdate,\n                displayOrder: Array.from(new Set(updatedDisplayOrder)),\n              }\n        )\n      );\n    },\n    [lists, setLists]\n  );\n\n  return {\n    addTasksToList,\n    removeTaskFromList,\n    moveTask,\n    moveTaskInColumn,\n  };\n}\n","/** @jsx jsx */\nimport * as React from \"react\";\nimport { css, jsx } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\nimport { uiColors } from \"@leafygreen-ui/palette\";\nimport {\n  DragDropContext,\n  Droppable,\n  Draggable,\n  DropResult,\n  DragDropContextProps,\n} from \"react-beautiful-dnd\";\n\nimport { Task } from \"../types\";\nimport TaskCard, { DraftTaskCard } from \"./TaskCard\";\nimport { TaskStatus, TaskActions } from \"../hooks/useTasks\";\nimport useDraftTask from \"../hooks/useDraftTask\";\nimport useTaskLists from \"../hooks/useTaskLists\";\nimport { useRealmApp } from \"../realm/RealmApp\";\n\nexport const taskStatus = new Map<string, TaskStatus>([\n  [\"OPEN\", TaskStatus.Open],\n  [\"INPROGRESS\", TaskStatus.Inprogress],\n  [\"COMPLETE\", TaskStatus.Complete],\n]);\n\ninterface TaskListsProps {\n  tasks: Task[];\n  taskActions: TaskActions;\n  showDetail: (task: Task) => void;\n}\n\nexport function TaskLists(props: TaskListsProps): React.ReactElement {\n  const { tasks, taskActions, showDetail } = props;\n  const { lists, actions: listActions } = useTaskLists(tasks);\n\n  const onDragEnd = (result: DropResult) => {\n    // Parse the drag and drop DropResult\n    const {\n      draggableId: taskId,\n      destination: { droppableId: destinationStatus } = {\n        droppableId: null,\n      },\n    } = result;\n    // If there wasn't a valid drop destination, don't do anything\n    if (!destinationStatus) return;\n    // Manipulate the in-memory lists, preserving drag and drop order\n    listActions.handleDragAndDrop(result);\n    // Update the Task if it changed status\n    const newStatus = taskStatus.get(destinationStatus);\n    if (newStatus) {\n      taskActions\n        .updateTask(taskId, {\n          status: taskStatus.get(newStatus),\n        })\n        .catch((err) => {\n          listActions.undoDragAndDrop(result);\n        });\n    }\n  };\n  return (\n    <TaskListsContainer onDragEnd={onDragEnd}>\n      {lists.map(({ status, displayName, tasks, displayOrder }) => {\n        return (\n          <TaskList\n            key={status}\n            status={status}\n            displayName={displayName}\n            tasks={\n              displayOrder\n                .map((id) => tasks.find((t) => t._id === id) ?? undefined)\n                .filter(Boolean) as Task[]\n            }\n            taskActions={taskActions}\n            showDetail={showDetail}\n          />\n        );\n      })}\n    </TaskListsContainer>\n  );\n}\n\nconst TaskListsContainer: React.FC<DragDropContextProps> = ({\n  onDragEnd,\n  children,\n}) => {\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <div\n        css={css`\n          width: 100%;\n          height: 100%;\n          display: flex;\n          justify-content: center;\n          padding-top: 0px;\n        `}\n      >\n        {children}\n      </div>\n    </DragDropContext>\n  );\n};\n\ninterface TaskListProps {\n  status: TaskStatus;\n  displayName: string;\n  tasks: Task[];\n  taskActions: TaskActions;\n  showDetail: (task: Task) => void;\n}\nexport default function TaskList(props: TaskListProps): React.ReactElement {\n  const { user } = useRealmApp();\n  const { status, displayName, tasks, taskActions, showDetail } = props;\n  const [draft, draftActions] = useDraftTask(taskActions);\n\n  return (\n    <Droppable droppableId={status}>\n      {(provided) => (\n        <Layout ref={provided.innerRef} {...provided.droppableProps}>\n          <ListContainer>\n            <ListTitle>{displayName}</ListTitle>\n            {tasks.map((task, i) => (\n              <DraggableListItem\n                key={task._id}\n                id={task._id}\n                index={i}\n                onClick={() => {\n                  showDetail(task);\n                }}\n              >\n                <TaskCard task={task} />\n              </DraggableListItem>\n            ))}\n            {provided.placeholder}\n            {draft && (\n              <ListItem>\n                <DraftTaskCard draft={draft} draftActions={draftActions} />\n              </ListItem>\n            )}\n            {!draft && (\n              <ListButton\n                onClick={() =>\n                  draftActions.createDraft({\n                    status,\n                    name: \"\",\n                    assignee: user?.id ?? \"\",\n                  })\n                }\n              >\n                + Add Task\n              </ListButton>\n            )}\n          </ListContainer>\n        </Layout>\n      )}\n    </Droppable>\n  );\n}\n\nconst Layout = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  max-width: 512px;\n  margin: 10px 10px;\n`;\n\nconst ListTitle = styled.h2`\n  margin: 0;\n  margin-bottom: 16px;\n  font-size: 32px;\n  color: ${uiColors.black};\n`;\n\nconst ListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 24px;\n  background: ${uiColors.gray.light1};\n  border-radius: 4px;\n  overflow-y: scroll;\n  max-height: 80vh;\n  :not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\nconst ListItem = styled.div`\n  :not(:last-child) {\n    margin-bottom: 16px;\n  }\n`;\n\ninterface DraggableListItemProps {\n  id: any;\n  index: number;\n  onClick: () => void;\n}\n\nconst DraggableListItem: React.FC<DraggableListItemProps> = ({\n  id,\n  index,\n  children,\n  onClick,\n}) => {\n  return (\n    <Draggable draggableId={id} index={index}>\n      {(provided) => (\n        <ListItem\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          onClick={onClick}\n        >\n          {children}\n        </ListItem>\n      )}\n    </Draggable>\n  );\n};\n\nconst ListButton = styled.button`\n  padding: 8px;\n  border: none;\n  background: ${uiColors.white};\n  background: transparent;\n  border-radius: 4px;\n  font-size: 16px;\n  text-align: left;\n  font-weight: bold;\n  color: ${uiColors.gray.dark2};\n  :hover {\n    background: ${uiColors.gray.light2};\n  }\n`;\n","import * as React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { Maybe, Task } from \"../types\";\nimport { TaskStatus } from \"../hooks/useTasks\";\nimport { useRealmApp } from \"../realm/RealmApp\";\n\nimport { TaskActions } from \"../hooks/useTasks\";\nimport { TaskView } from \"./TaskView\";\nimport Modal from \"@leafygreen-ui/modal\";\nimport Button from \"@leafygreen-ui/button\";\n\ninterface TaskDetailProps {\n  task?: Maybe<Task>;\n  taskActions: TaskActions;\n}\n\ninterface TaskDetailModalProps {\n  task?: Maybe<Task>;\n  taskActions: TaskActions;\n  closeModal: () => void;\n}\nexport function TaskDetailModal({\n  task,\n  taskActions,\n  closeModal,\n}: TaskDetailModalProps): React.ReactElement {\n  const { user } = useRealmApp();\n\n  const changeTaskStatus = async (status: TaskStatus) => {\n    if (!task) return;\n    await taskActions.updateTask(task._id, { status });\n  };\n\n  const deleteTask = async (task: Task) => {\n    if (!task) return;\n    await taskActions.deleteTask(task);\n    closeModal();\n  };\n\n  return (\n    <PositionedModal\n      size=\"small\"\n      open={Boolean(task)}\n      shouldClose={() => {\n        closeModal();\n        return true;\n      }}\n    >\n      {task && (\n        <>\n          <TaskView task={task} />\n          {task?.status !== TaskStatus.Open && (\n            <FullWidthButton onClick={() => changeTaskStatus(TaskStatus.Open)}>\n              Move to Open\n            </FullWidthButton>\n          )}\n          {task?.status !== TaskStatus.Inprogress && (\n            <FullWidthButton\n              onClick={() => changeTaskStatus(TaskStatus.Inprogress)}\n            >\n              Move to In Progress\n            </FullWidthButton>\n          )}\n          {task?.status !== TaskStatus.Complete && (\n            <FullWidthButton\n              onClick={() => changeTaskStatus(TaskStatus.Complete)}\n            >\n              Move to Complete\n            </FullWidthButton>\n          )}\n          {task.assignee?.user_id === user?.id && (\n            <FullWidthButton variant=\"danger\" onClick={() => deleteTask(task)}>\n              Delete this task\n            </FullWidthButton>\n          )}\n        </>\n      )}\n    </PositionedModal>\n  );\n}\n\nconst PositionedModal = styled(Modal)`\n  > div {\n    top: 20%;\n  }\n`;\n\nconst FullWidthButton = styled(Button)`\n  width: 100%;\n  margin: 8px 0;\n`;\n\nexport function useTaskDetailView(\n  tasks: Task[]\n): [\n  React.FC<TaskDetailProps>,\n  {\n    show: (task: Task) => void;\n    close: () => void;\n  }\n] {\n  const [currentTask, setCurrentTask] = React.useState<Maybe<Task>>(null);\n  const updateCurrentTask = React.useCallback(\n    (tasks: Task[]) => {\n      if (currentTask) {\n        const task = tasks.find((t: Task) => t._id === currentTask._id);\n        if (task) setCurrentTask(task);\n      }\n    },\n    [currentTask]\n  );\n  React.useEffect(() => {\n    updateCurrentTask(tasks);\n  }, [tasks, updateCurrentTask]);\n\n  function show(task: Task) {\n    setCurrentTask(task);\n  }\n\n  function close() {\n    setCurrentTask(null);\n  }\n\n  const Component: React.FC<TaskDetailProps> = ({ taskActions }) => (\n    <TaskDetailModal\n      key={currentTask?._id}\n      task={currentTask}\n      taskActions={taskActions}\n      closeModal={close}\n    />\n  );\n\n  return [Component, { show, close }];\n}\n","import * as React from \"react\";\nimport styled from \"@emotion/styled\";\nimport Navbar from \"./Navbar\";\nimport { TaskLists } from \"./TaskLists\";\nimport { useTaskDetailView } from \"./TaskDetail\";\nimport { useTasks } from \"../hooks/useTasks\";\n\nconst Board: React.FC = () => {\n  const { tasks, loading, actions: taskActions } = useTasks();\n  const [TaskDetailView, { show }] = useTaskDetailView(tasks);\n\n  return (\n    <TaskBoard>\n      <Navbar />\n      {!loading && (\n        <TaskLists tasks={tasks} taskActions={taskActions} showDetail={show} />\n      )}\n      <TaskDetailView taskActions={taskActions} />\n    </TaskBoard>\n  );\n};\nexport default Board;\n\nconst TaskBoard = styled.div`\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n`;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport RealmApp, { useRealmApp } from \"../realm/RealmApp\";\nimport RealmApolloProvider from \"../realm/RealmApolloProvider\";\nimport LoginScreen from \"./LoginScreen\";\nimport Board from \"./Board\";\n\nconst App: React.FC = (props) => {\n  return (\n    <RealmApp>\n      <AppContainer>\n        <RequireAuthentication />\n      </AppContainer>\n    </RealmApp>\n  );\n};\nexport default App;\n\nconst AppContainer = styled.div`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nfunction RequireAuthentication() {\n  const app = useRealmApp();\n  if (!app) {\n    return <div>Loading</div>;\n  }\n  return app.user ? (\n    <RealmApolloProvider>\n      <Board />\n    </RealmApolloProvider>\n  ) : (\n    <LoginScreen />\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}